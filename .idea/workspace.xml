<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="823fe9e0-ddc2-46c4-b3b3-88cd974c2b1b" name="Changes" comment="Implemented the Schoolboy class to represent information about schoolchildren, as well as the SchoolboyList class, which represents a list of schoolchildren and has the ability to iterate over it using an iterator.&#10;&#10;Implemented the Schoolboy class with the name and age fields, as well as the SchoolboyList class, which is a list of Schoolboy objects.&#10;&#10;The SchoolboyList class implements the Iterable&lt;Schoolboy&gt; interface so that its objects can be used in a for-each loop.&#10;Also in this class there is a method addSchoolboy(Schoolboy schoolboy), which adds a student to the list.&#10;&#10;In addition, in the SchoolboyList class I implemented the nested SchoolboyIterator class, which implements the Iterator&lt;Schoolboy&gt; interface.&#10;This iterator allows you to iterate through a list of students, starting from the first element to the last.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeInsightWorkspaceSettings">
    <option name="optimizeImportsOnTheFly" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2YLmQcqdSegcLSypREy2K6juFMK" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;File.Encoding&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;ChangesTree.GroupingKeys&quot;: [
      &quot;module&quot;,
      &quot;directory&quot;
    ]
  }
}</component>
  <component name="RunManager" selected="Application.ThreadSynchronization">
    <configuration name="OrderTest" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JavaCollectionsFramework.EqualsAndHashCode.OrderTest" />
      <module name="AdvancedJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="JavaCollectionsFramework.EqualsAndHashCode.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="StudentSorting" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JavaCollectionsFramework.StudentSorting" />
      <module name="AdvancedJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="JavaCollectionsFramework.Student" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="TestIteratorAndIterable" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JavaCollectionsFramework.TestIteratorAndIterable" />
      <module name="AdvancedJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="JavaCollectionsFramework.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ThreadSynchronization" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JavaMultithreading.ThreadSynchronization" />
      <module name="AdvancedJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="JavaMultithreading.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="TreeMapExample" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JavaCollectionsFramework.TreeMapExample" />
      <module name="AdvancedJava" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="JavaCollectionsFramework.Student" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.ThreadSynchronization" />
        <item itemvalue="Application.TestIteratorAndIterable" />
        <item itemvalue="Application.OrderTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="823fe9e0-ddc2-46c4-b3b3-88cd974c2b1b" name="Changes" comment="" />
      <created>1700313241576</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1700313241576</updated>
      <workItem from="1700313242940" duration="329000" />
      <workItem from="1700313687328" duration="2597000" />
      <workItem from="1700404173096" duration="1123000" />
      <workItem from="1700499935138" duration="3764000" />
      <workItem from="1700588033156" duration="2305000" />
      <workItem from="1700673691782" duration="2764000" />
      <workItem from="1701276650118" duration="1760000" />
      <workItem from="1701364740693" duration="4381000" />
      <workItem from="1701612923748" duration="1923000" />
      <workItem from="1701710005728" duration="3189000" />
      <workItem from="1701796901206" duration="2862000" />
      <workItem from="1701881877306" duration="3477000" />
      <workItem from="1702118505946" duration="2098000" />
      <workItem from="1702120634705" duration="4092000" />
      <workItem from="1702211047177" duration="617000" />
      <workItem from="1702314125507" duration="4352000" />
      <workItem from="1702400919204" duration="2302000" />
      <workItem from="1702573865586" duration="1219000" />
      <workItem from="1702575882615" duration="232000" />
      <workItem from="1704658169079" duration="12000" />
      <workItem from="1704824823692" duration="1302000" />
      <workItem from="1704911400759" duration="1133000" />
      <workItem from="1704993812779" duration="2176000" />
      <workItem from="1705949582623" duration="1482000" />
      <workItem from="1706035191299" duration="946000" />
      <workItem from="1707153609942" duration="2284000" />
      <workItem from="1707240794427" duration="68000" />
      <workItem from="1707654689956" duration="2664000" />
      <workItem from="1707928300061" duration="1503000" />
      <workItem from="1708450052807" duration="753000" />
      <workItem from="1708968674801" duration="2081000" />
      <workItem from="1708971790972" duration="215000" />
      <workItem from="1711558201963" duration="669000" />
    </task>
    <task id="LOCAL-00001" summary="add">
      <created>1700313748831</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1700313748831</updated>
    </task>
    <task id="LOCAL-00002" summary="Calculated the flight of a body thrown at an angle to the horizontal.">
      <created>1702120503581</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1702120503581</updated>
    </task>
    <task id="LOCAL-00003" summary="Calculated the flight of a body thrown at an angle to the horizontal.">
      <created>1702120976745</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1702120976745</updated>
    </task>
    <task id="LOCAL-00004" summary="Calculated the flight of a body thrown at an angle to the horizontal.">
      <created>1702121282660</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1702121282660</updated>
    </task>
    <task id="LOCAL-00005" summary="Calculated the flight of a body thrown at an angle to the horizontal.">
      <created>1702121428358</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1702121428358</updated>
    </task>
    <task id="LOCAL-00006" summary="Calculated the flight of a body thrown at an angle to the horizontal.">
      <created>1702121633971</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1702121633971</updated>
    </task>
    <task id="LOCAL-00007" summary="Calculated the speed on the route.">
      <created>1702123530249</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1702123530249</updated>
    </task>
    <task id="LOCAL-00008" summary="Calculation of satellite orbit altitude">
      <created>1702124347098</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1702124347098</updated>
    </task>
    <task id="LOCAL-00009" summary="Raising a complex number to a power.">
      <created>1702124749889</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1702124749889</updated>
    </task>
    <task id="LOCAL-00010" summary="Created a class ArrayListAndLinkedList, which contains two methods:&#10;&#10;processArrayList: This method takes an ArrayList of strings as input and performs the following actions:&#10;Removes all elements containing the letter 'a'.&#10;Adds the string &quot;NewElement&quot; to the end of the list.&#10;Displays all elements of the list.&#10;processLinkedList: This method takes a LinkedList of numbers as input and performs the following actions:&#10;Doubles the value of each element.&#10;Removes the first three elements of the list.&#10;Displays all elements of the list.&#10;In the main method, create an ArrayList and LinkedList objects, add a few elements to each collection, and call the appropriate processArrayList and processLinkedList methods to process them.">
      <created>1704826113076</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1704826113076</updated>
    </task>
    <task id="LOCAL-00011" summary="I compared the speed of inserting 5,000,000 elements into the middle of a list between ArrayList and LinkedList.">
      <created>1704912126452</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1704912126452</updated>
    </task>
    <task id="LOCAL-00012" summary="I compared the speed of inserting 1,000,000 elements into the beginning of a list between ArrayList and LinkedList.">
      <created>1704912532472</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1704912532472</updated>
    </task>
    <task id="LOCAL-00013" summary="Created the InventoryManagerHashMap class, which contains a HashMap for storing information about products in the store.&#10;The keys are the names of the products (strings), and the values are the number of units of each product (integers).&#10;&#10;Implemented methods:&#10;&#10;addToInventory(String itemName, int quantity): Add the specified quantity of an item to inventory.&#10;SellItem(String itemName, int quantity): Calculates the specified quantity of an item from inventory when selling.&#10;&#10;I made sure that the quantity of the product does not become negative.&#10;getInventory(): Returns the current inventory as a HashMap.&#10;In the main method I wrote a simple program that makes your InventoryManagerHashMap work. Created a few products, added them to inventory, sold a few units, and then displayed the current inventory.">
      <created>1704996073092</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1704996073092</updated>
    </task>
    <task id="LOCAL-00014" summary="The Student class was created following the rules:&#10;&#10;name (student name) of type String.&#10;grade (student grade) of type int.&#10;Created a TreeMap named StudentMap, where the key is the student's name and the value is the student's grade.&#10;&#10;Wrote the addStudent method to add a new student to the TreeMap. The method takes the student's name and his measuring instrument and writes the corresponding entry into the TreeMap.&#10;&#10;Wrote the getTopStudent method to get the name of the first student from TreeMap.&#10;&#10;Wrote a printStudentMap method to calculate the TreeMap score in the console.&#10;&#10;Created a protest class object and added some students, made a list of students and got the first student.">
      <created>1705951065665</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1705951065665</updated>
    </task>
    <task id="LOCAL-00015" summary="Created the WordCounterHashSet class.&#10;The class defines a method countUniqueWords, which accepts text and returns the number of unique words in this text.&#10;The internal method used a HashSet to store unique words.&#10;Split text with words, omitting punctuation and registration.&#10;After processing the text, I displayed a lot of unique words on the screen.">
      <created>1707154285401</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1707154285401</updated>
    </task>
    <task id="LOCAL-00016" summary="Created the UniqueSymbolsCounterHashSet class.&#10;The class defines a method countUniqueCharacters, which takes characters and retrieves the number of unique characters in it.&#10;Used HashSet to store unique characters.&#10;When counting unique characters, case is ignored (that is, 'a' and 'A' are counted as one character).&#10;Returned the number of unique characters in the string.">
      <created>1707155901656</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1707155901656</updated>
    </task>
    <task id="LOCAL-00017" summary="An application for tracking orders in an online store.&#10;&#10;Created the Order class, which represents an order.&#10;The order contains the following characteristics:&#10;&#10;orderId (order ID, number value)&#10;customerName(customername, string)&#10;totalAmount (total order amount, real number)&#10;&#10;Overridden the Equals() and hashCode() methods to correctly compare objects such as Order.&#10;Two order conditions if their order matches.&#10;&#10;Then I wrote tests to check the correct operation of the overridden methods.&#10;&#10;In this case, the main() method runs the testEquals() and testHashCode() methods, which check that the Equals() and hashCode() methods are working correctly.&#10;Test results are output to the console.">
      <created>1707657357527</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1707657357527</updated>
    </task>
    <task id="LOCAL-00018" summary="Student1">
      <created>1707929775648</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1707929775648</updated>
    </task>
    <task id="LOCAL-00019" summary="The StudentSorting class has been implemented, which has the following characteristics:&#10;Student name (name) of type String.&#10;Average score (averageGrade) of double type.&#10;Implement the Comparable&lt;Student&gt; interface, which will allow you to compare students by their GPA.&#10;Also, to be able to sort in sequential order, the Comparator&lt;Student&gt; interface is implemented, which is used to sort students in different contexts.&#10;Ensure that students are sorted in descending order of their GPA.">
      <created>1707929798653</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1707929798653</updated>
    </task>
    <task id="LOCAL-00020" summary="Created a RestaurantQueue class that has methods:&#10;takeOrder(String order): insert an order into the queue.&#10;serveOrder(): Processes one by one, serving orders in the order they are received.&#10;Implemented the RestaurantDemo class, which powers your program. Several orders have been created for this class and assigned to them one by one. The serveOrder() method was then called to process the queue.">
      <created>1708450799703</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1708450799703</updated>
    </task>
    <task id="LOCAL-00021" summary="Implemented the Schoolboy class to represent information about schoolchildren, as well as the SchoolboyList class, which represents a list of schoolchildren and has the ability to iterate over it using an iterator.&#10;&#10;Implemented the Schoolboy class with the name and age fields, as well as the SchoolboyList class, which is a list of Schoolboy objects.&#10;&#10;The SchoolboyList class implements the Iterable&lt;Schoolboy&gt; interface so that its objects can be used in a for-each loop.&#10;Also in this class there is a method addSchoolboy(Schoolboy schoolboy), which adds a student to the list.&#10;&#10;In addition, in the SchoolboyList class I implemented the nested SchoolboyIterator class, which implements the Iterator&lt;Schoolboy&gt; interface.&#10;This iterator allows you to iterate through a list of students, starting from the first element to the last.">
      <created>1708971990034</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1708971990034</updated>
    </task>
    <option name="localTasksCounter" value="22" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="add" />
    <MESSAGE value="Calculated the flight of a body thrown at an angle to the horizontal." />
    <MESSAGE value="Calculated the speed on the route." />
    <MESSAGE value="Calculation of satellite orbit altitude" />
    <MESSAGE value="Raising a complex number to a power." />
    <MESSAGE value="Created a class ArrayListAndLinkedList, which contains two methods:&#10;&#10;processArrayList: This method takes an ArrayList of strings as input and performs the following actions:&#10;Removes all elements containing the letter 'a'.&#10;Adds the string &quot;NewElement&quot; to the end of the list.&#10;Displays all elements of the list.&#10;processLinkedList: This method takes a LinkedList of numbers as input and performs the following actions:&#10;Doubles the value of each element.&#10;Removes the first three elements of the list.&#10;Displays all elements of the list.&#10;In the main method, create an ArrayList and LinkedList objects, add a few elements to each collection, and call the appropriate processArrayList and processLinkedList methods to process them." />
    <MESSAGE value="I compared the speed of inserting 5,000,000 elements into the middle of a list between ArrayList and LinkedList." />
    <MESSAGE value="I compared the speed of inserting 1,000,000 elements into the beginning of a list between ArrayList and LinkedList." />
    <MESSAGE value="Created the InventoryManagerHashMap class, which contains a HashMap for storing information about products in the store.&#10;The keys are the names of the products (strings), and the values are the number of units of each product (integers).&#10;&#10;Implemented methods:&#10;&#10;addToInventory(String itemName, int quantity): Add the specified quantity of an item to inventory.&#10;SellItem(String itemName, int quantity): Calculates the specified quantity of an item from inventory when selling.&#10;&#10;I made sure that the quantity of the product does not become negative.&#10;getInventory(): Returns the current inventory as a HashMap.&#10;In the main method I wrote a simple program that makes your InventoryManagerHashMap work. Created a few products, added them to inventory, sold a few units, and then displayed the current inventory." />
    <MESSAGE value="The Student class was created following the rules:&#10;&#10;name (student name) of type String.&#10;grade (student grade) of type int.&#10;Created a TreeMap named StudentMap, where the key is the student's name and the value is the student's grade.&#10;&#10;Wrote the addStudent method to add a new student to the TreeMap. The method takes the student's name and his measuring instrument and writes the corresponding entry into the TreeMap.&#10;&#10;Wrote the getTopStudent method to get the name of the first student from TreeMap.&#10;&#10;Wrote a printStudentMap method to calculate the TreeMap score in the console.&#10;&#10;Created a protest class object and added some students, made a list of students and got the first student." />
    <MESSAGE value="Created the WordCounterHashSet class.&#10;The class defines a method countUniqueWords, which accepts text and returns the number of unique words in this text.&#10;The internal method used a HashSet to store unique words.&#10;Split text with words, omitting punctuation and registration.&#10;After processing the text, I displayed a lot of unique words on the screen." />
    <MESSAGE value="Created the UniqueSymbolsCounterHashSet class.&#10;The class defines a method countUniqueCharacters, which takes characters and retrieves the number of unique characters in it.&#10;Used HashSet to store unique characters.&#10;When counting unique characters, case is ignored (that is, 'a' and 'A' are counted as one character).&#10;Returned the number of unique characters in the string." />
    <MESSAGE value="An application for tracking orders in an online store.&#10;&#10;Created the Order class, which represents an order.&#10;The order contains the following characteristics:&#10;&#10;orderId (order ID, number value)&#10;customerName(customername, string)&#10;totalAmount (total order amount, real number)&#10;&#10;Overridden the Equals() and hashCode() methods to correctly compare objects such as Order.&#10;Two order conditions if their order matches.&#10;&#10;Then I wrote tests to check the correct operation of the overridden methods.&#10;&#10;In this case, the main() method runs the testEquals() and testHashCode() methods, which check that the Equals() and hashCode() methods are working correctly.&#10;Test results are output to the console." />
    <MESSAGE value="Student1" />
    <MESSAGE value="The StudentSorting class has been implemented, which has the following characteristics:&#10;Student name (name) of type String.&#10;Average score (averageGrade) of double type.&#10;Implement the Comparable&lt;Student&gt; interface, which will allow you to compare students by their GPA.&#10;Also, to be able to sort in sequential order, the Comparator&lt;Student&gt; interface is implemented, which is used to sort students in different contexts.&#10;Ensure that students are sorted in descending order of their GPA." />
    <MESSAGE value="Created a RestaurantQueue class that has methods:&#10;takeOrder(String order): insert an order into the queue.&#10;serveOrder(): Processes one by one, serving orders in the order they are received.&#10;Implemented the RestaurantDemo class, which powers your program. Several orders have been created for this class and assigned to them one by one. The serveOrder() method was then called to process the queue." />
    <MESSAGE value="Implemented the Schoolboy class to represent information about schoolchildren, as well as the SchoolboyList class, which represents a list of schoolchildren and has the ability to iterate over it using an iterator.&#10;&#10;Implemented the Schoolboy class with the name and age fields, as well as the SchoolboyList class, which is a list of Schoolboy objects.&#10;&#10;The SchoolboyList class implements the Iterable&lt;Schoolboy&gt; interface so that its objects can be used in a for-each loop.&#10;Also in this class there is a method addSchoolboy(Schoolboy schoolboy), which adds a student to the list.&#10;&#10;In addition, in the SchoolboyList class I implemented the nested SchoolboyIterator class, which implements the Iterator&lt;Schoolboy&gt; interface.&#10;This iterator allows you to iterate through a list of students, starting from the first element to the last." />
    <option name="LAST_COMMIT_MESSAGE" value="Implemented the Schoolboy class to represent information about schoolchildren, as well as the SchoolboyList class, which represents a list of schoolchildren and has the ability to iterate over it using an iterator.&#10;&#10;Implemented the Schoolboy class with the name and age fields, as well as the SchoolboyList class, which is a list of Schoolboy objects.&#10;&#10;The SchoolboyList class implements the Iterable&lt;Schoolboy&gt; interface so that its objects can be used in a for-each loop.&#10;Also in this class there is a method addSchoolboy(Schoolboy schoolboy), which adds a student to the list.&#10;&#10;In addition, in the SchoolboyList class I implemented the nested SchoolboyIterator class, which implements the Iterator&lt;Schoolboy&gt; interface.&#10;This iterator allows you to iterate through a list of students, starting from the first element to the last." />
  </component>
</project>